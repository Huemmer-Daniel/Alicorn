var documenterSearchIndex = {"docs":
[{"location":"reference/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"","category":"page"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"DocTestSetup = quote\n    using Alicorn\nend","category":"page"},{"location":"reference/quantities/#Quantities","page":"Quantities","title":"Quantities","text":"","category":"section"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"This section describes the Quantities submodule of Alicorn. The module is concerned with defining and manipulating physical quantities.","category":"page"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"Unless stated otherwise, all types, functions, and constants defined in the submodule are exported by Alicorn.","category":"page"},{"location":"reference/quantities/#Contents","page":"Quantities","title":"Contents","text":"","category":"section"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"Pages = [\"quantities.md\"]","category":"page"},{"location":"reference/quantities/#Quantities-2","page":"Quantities","title":"Quantities","text":"","category":"section"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"AbstractQuantity\nSimpleQuantity\nQuantity","category":"page"},{"location":"reference/quantities/#Alicorn.Quantities.AbstractQuantity","page":"Quantities","title":"Alicorn.Quantities.AbstractQuantity","text":"AbstractQuantity{T}\n\nAbstract supertype for all types that represent a scalar physical quantity.\n\n\n\n\n\n","category":"type"},{"location":"reference/quantities/#Alicorn.Quantities.SimpleQuantity","page":"Quantities","title":"Alicorn.Quantities.SimpleQuantity","text":"SimpleQuantity{T<:Number} <: AbstractQuantity{T}\n\nA physical quantity consisting of a scalar value and a physical unit.\n\nThe value field of a SimpleQuantity{T} is of type T, which needs to be a subtype of Number.\n\nFields\n\nvalue::T: value of the quantity\nunit::Unit: unit of the quantity\n\nConstructors\n\nSimpleQuantity(value::T, abstractUnit::AbstractUnit) where T <: Number\nSimpleQuantity(value::T) where T <: Number\nSimpleQuantity(abstractUnit::AbstractUnit)\nSimpleQuantity(simpleQuantity::SimpleQuantity)\n\nIf no AbstractUnit is passed to the constructor, the Alicorn.unitlessUnit is used by default. If no value is passed to the constructor, the value is set to 1 by default.\n\nExamples\n\nThe quantity 7mathrmnm (seven nanometers) can be constructed using the constructor method as follows:\njulia> ucat = UnitCatalogue() ;\n\njulia> nanometer = ucat.nano * ucat.meter\nUnitFactor nm\n\njulia> quantity = SimpleQuantity(7, nanometer)\n7 nm\nAlternatively, 7mathrmnm can be constructed arithmetically:\njulia> ucat = UnitCatalogue() ;\n\njulia> nm = ucat.nano * ucat.meter\nUnitFactor nm\n\njulia> quantity = 7nm\n7 nm\n\n\n\n\n\n","category":"type"},{"location":"reference/quantities/#Alicorn.Quantities.Quantity","page":"Quantities","title":"Alicorn.Quantities.Quantity","text":"Quantity{T<:Number} <: AbstractQuantity{T}\n\nA physical quantity consisting of a number, a Dimension object representing the physical dimension, and an InternalUnits object representing the units with respect to which the seven basic dimensions of the SI system are measured.\n\nThe value field of a Quantity{T} is of type T, which needs to be a subtype of Number.\n\nFields\n\nvalue::T: value of the quantity\ndimension::Dimension: physical dimension of the quantity\ninternalUnits::InternalUnits: set of units with respect to which the seven\n\nbasic dimensions of the SI system are measured.\n\nConstructors\n\nQuantity(value::T, dimension::Dimension, internalUnits::InternalUnits) where T <: Number\nQuantity(simpleQuantity::SimpleQuantity, internalUnits::InternalUnits)\n\n\n\n\n\n","category":"type"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"Base.:*(::Number, ::AbstractUnit)\nBase.:/(::Number, ::AbstractUnit)","category":"page"},{"location":"reference/quantities/#Base.:*-Tuple{Number, AbstractUnit}","page":"Quantities","title":"Base.:*","text":"Base.:*(value::Number, abstractUnit::AbstractUnit)\n\nCombine value and abstractUnit to form a physical quantity of type SimpleQuantity.\n\nExample\n\njulia> ucat = UnitCatalogue() ;\n\njulia> 3.5 * ucat.tesla\n3.5 T\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:/-Tuple{Number, AbstractUnit}","page":"Quantities","title":"Base.:/","text":"Base.:/(value::Number, abstractUnit::AbstractUnit)\n\nCombine value and abstractUnit to form a physical quantity of type SimpleQuantity.\n\nExample\n\njulia> ucat = UnitCatalogue() ;\n\njulia> 3.5 / ucat.second\n3.5 s^-1\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Unit-conversion","page":"Quantities","title":"Unit conversion","text":"","category":"section"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"inUnitsOf(::AbstractQuantity, ::AbstractUnit)\ninBasicSIUnits(::AbstractQuantity)\nvalueInUnitsOf(::AbstractQuantity, ::AbstractUnit)\nvalueInUnitsOf(::AbstractQuantity, ::SimpleQuantity)\nvalueOfDimensionless(::AbstractQuantity)","category":"page"},{"location":"reference/quantities/#Alicorn.Quantities.inUnitsOf-Tuple{AbstractQuantity, AbstractUnit}","page":"Quantities","title":"Alicorn.Quantities.inUnitsOf","text":"inUnitsOf(quantity::AbstractQuantity, unit::AbstractUnit)::SimpleQuantity\n\nExpress quantity as an object of type SimpleQuantity in terms of the unit specified by unit.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if the dimensions of quantity and unit do not agree\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.inBasicSIUnits-Tuple{AbstractQuantity}","page":"Quantities","title":"Alicorn.Quantities.inBasicSIUnits","text":"inBasicSIUnits(quantity::AbstractQuantity)::SimpleQuantity\n\nExpress quantity as an object of type SimpleQuantity using the seven basic SI units.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.valueInUnitsOf-Tuple{AbstractQuantity, AbstractUnit}","page":"Quantities","title":"Alicorn.Quantities.valueInUnitsOf","text":"valueInUnitsOf(quantity::AbstractQuantity, unit::AbstractUnit)\n\nReturns the numerical value of quantity expressed in units of unit.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if the dimensions of quantity and unit do not agree\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.valueInUnitsOf-Tuple{AbstractQuantity, SimpleQuantity}","page":"Quantities","title":"Alicorn.Quantities.valueInUnitsOf","text":"valueInUnitsOf(quantity::AbstractQuantity, simpleQuantity::SimpleQuantity)\n\nReturns the numerical value of quantity expressed in units of simpleQuantity.\n\nThe result is equivalent to valueOfDimensionless(quantity / simpleQuantity).\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if the dimensions of quantity and simpleQuantity do not agree\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.valueOfDimensionless-Tuple{AbstractQuantity}","page":"Quantities","title":"Alicorn.Quantities.valueOfDimensionless","text":"valueOfDimensionless(quantity::AbstractQuantity)\n\nStrips the unit from a dimensionless quantity and returns its bare value.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if quantity is not dimensionless\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"Base.:*(::AbstractQuantity, ::AbstractUnit)\nBase.:/(::AbstractQuantity, ::AbstractUnit)","category":"page"},{"location":"reference/quantities/#Base.:*-Tuple{AbstractQuantity, AbstractUnit}","page":"Quantities","title":"Base.:*","text":"Base.:*(quantity::AbstractQuantity, unit::AbstractUnit)\nBase.:*(unit::AbstractUnit, quantity::AbstractQuantity)\n\nModify the unit of quantity by multiplying it with unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:/-Tuple{AbstractQuantity, AbstractUnit}","page":"Quantities","title":"Base.:/","text":"Base.:/(quantity::AbstractQuantity, unit::AbstractUnit)\nBase.:/(unit::AbstractUnit, quantity::AbstractQuantity)\n\nModify the unit of quantity by dividing it by unit, or vice versa.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"valueOfDimensionless(::SimpleQuantity)\nBase.:(==)(::SimpleQuantity, ::SimpleQuantity)\nBase.:(==)(::Quantity, ::Quantity)\nBase.:+(::SimpleQuantity, ::SimpleQuantity)\nBase.:-(::SimpleQuantity, ::SimpleQuantity)\nBase.isless(::SimpleQuantity, ::SimpleQuantity)\nBase.isapprox(::SimpleQuantity, ::SimpleQuantity)\nBase.zero(::Type, ::AbstractUnit)","category":"page"},{"location":"reference/quantities/#Alicorn.Quantities.valueOfDimensionless-Tuple{SimpleQuantity}","page":"Quantities","title":"Alicorn.Quantities.valueOfDimensionless","text":"valueOfDimensionless(quantity::AbstractQuantity)\n\nStrips the unit from a dimensionless quantity and returns its bare value.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if quantity is not dimensionless\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:==-Tuple{SimpleQuantity, SimpleQuantity}","page":"Quantities","title":"Base.:==","text":"Base.:(==)(simpleQuantity1::SimpleQuantity, simpleQuantity2::SimpleQuantity)\n\nReturns true if simpleQuantity1 and simpleQuantity2 are of equal value.\n\nIf necessary, simpleQuantity2 is expressed in units of simpleQuantity1.unit before the comparison. Note that the conversion oftens lead to rounding errors that render simpleQuantity1 not equal simpleQuantity2.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if simpleQuantity1 and\n\nsimpleQuantity2 are not of the same dimension\n\nExamples\n\njulia> ucat = UnitCatalogue() ;\n\njulia> q1 = 7 * ucat.meter\n7 m\n\njulia> q2 = 700 * (ucat.centi * ucat.meter)\n700 cm\n\njulia> q1 == q1\ntrue\n\njulia> q1 == q2\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:==-Tuple{Quantity, Quantity}","page":"Quantities","title":"Base.:==","text":"Base.:(==)(quantity1::Quantity, quantity2::Quantity)\n\nCompare two Quantity objects.\n\nThe two quantities are equal if their values, their dimensions, and their internal units are equal. Note that the units are not converted during the comparison.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:+-Tuple{SimpleQuantity, SimpleQuantity}","page":"Quantities","title":"Base.:+","text":"Base.:+(simpleQuantity1::SimpleQuantity, simpleQuantity2::SimpleQuantity)\n\nAdd two SimpleQuantities.\n\nThe resulting quantity is expressed in units of simpleQuantity1.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if simpleQuantity1 and simpleQuantity2 are of different dimensions\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:--Tuple{SimpleQuantity, SimpleQuantity}","page":"Quantities","title":"Base.:-","text":"Base.:-(simpleQuantity1::SimpleQuantity, simpleQuantity2::SimpleQuantity)\n\nSubtract two SimpleQuantities.\n\nThe resulting quantity is expressed in units of simpleQuantity1.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if simpleQuantity1 and simpleQuantity2 are of different dimensions\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.isless-Tuple{SimpleQuantity, SimpleQuantity}","page":"Quantities","title":"Base.isless","text":"Base.isless(simpleQuantity1::SimpleQuantity, simpleQuantity2::SimpleQuantity)\n\nReturns true if simpleQuantity1 is of lesser value than simpleQuantity2.\n\nIf necessary, simpleQuantity2 is expressed in units of simpleQuantity1.unit before the comparison. Note that the conversion often leads to rounding errors.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if simpleQuantity1 and\n\nsimpleQuantity2 are not of the same dimension\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.isapprox-Tuple{SimpleQuantity, SimpleQuantity}","page":"Quantities","title":"Base.isapprox","text":"Base.isapprox(simpleQuantity1::SimpleQuantity, simpleQuantity2::SimpleQuantity; rtol::Real = sqrt(eps()) )\n\nReturns isapprox(simpleQuantity1.value, simpleQuantity2.value, rtol=rtol).\n\nIf necessary, simpleQuantity2 is expressed in units of simpleQuantity1.unit before the comparison. Note that the conversion often leads to rounding errors.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if simpleQuantity1 and\n\nsimpleQuantity2 are not of the same dimension\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.zero-Tuple{Type, AbstractUnit}","page":"Quantities","title":"Base.zero","text":"Base.zero(numberType::Type, unit::AbstractUnit)\n\nReturn a SimpleQuantity with unit unit and value zero(numberType).\n\nRaises Exceptions\n\nAlicorn.DomainError: if numberType is not a subtype of Number.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Quantity-Arrays","page":"Quantities","title":"Quantity Arrays","text":"","category":"section"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"AbstractQuantityArray\nSimpleQuantityArray\nQuantityArray","category":"page"},{"location":"reference/quantities/#Alicorn.Quantities.AbstractQuantityArray","page":"Quantities","title":"Alicorn.Quantities.AbstractQuantityArray","text":"AbstractQuantity{T,N} <: AbstractArray{T,N}\n\nAbstract supertype for all types that represent a physical quantity array.\n\n\n\n\n\n","category":"type"},{"location":"reference/quantities/#Alicorn.Quantities.SimpleQuantityArray","page":"Quantities","title":"Alicorn.Quantities.SimpleQuantityArray","text":"SimpleQuantityArray{T<:Number,N} <: AbstractQuantityArray{T,N}\n\nA physical quantity consisting of a number array and a physical unit.\n\nThe value field of a SimpleQuantityArray{T,N} is of type Array{T,N}. T needs to be a subtype of Number.\n\nFields\n\nvalue::Array{T,N}: value of the quantity\nunit::Unit: unit of the quantity\n\nConstructors\n\n``` SimpleQuantityArray(value::AbstractArray{T,N}, abstractUnit::AbstractUnit) where {T<:Number, N} SimpleQuantityArray(value::AbstractArray{T,N}) where {T<:Number, N} SimpleQuantityArray(simpleQuantity::SimpleQuantity) SimpleQuantityArray(sqArray::SimpleQuantityArray)\n\n\n\n\n\n","category":"type"},{"location":"reference/quantities/#Alicorn.Quantities.QuantityArray","page":"Quantities","title":"Alicorn.Quantities.QuantityArray","text":"QuantityArray{T<:Number,N} <: AbstractQuantityArray{T,N}\n\nA physical quantity consisting of an array, a Dimension object representing the physical dimension, and an InternalUnits object representing the units with respect to which the seven basic dimensions of the SI system are measured.\n\nThe value field of a QuantityArray{T,N} is of type Array{T,N}. T needs to be a subtype of Number.\n\nFields\n\nvalue::Array{T,N}: value of the quantity\ndimension::Dimension: physical dimension of the quantity\ninternalUnits::InternalUnits: set of units with respect to which the seven\n\nbasic dimensions of the SI system are measured.\n\nConstructors\n\n``` QuantityArray(value::AbstractArray{T,N}, dimension::Dimension, internalUnits::InternalUnits) QuantityArray(sqArray::SimpleQuantityArray, internalUnits::InternalUnits)\n\n\n\n\n\n","category":"type"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"Base.:*(::AbstractArray{T,N}, ::AbstractUnit) where {T<:Number, N}\nBase.:/(::AbstractArray{T,N}, ::AbstractUnit) where {T<:Number, N}","category":"page"},{"location":"reference/quantities/#Base.:*-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, AbstractUnit}} where {T<:Number, N}","page":"Quantities","title":"Base.:*","text":"Base.:*(value::AbstractArray{T,N}, abstractUnit::AbstractUnit) where {T<:Number, N}\n\nCombine the array value and abstractUnit to form a physical quantity of type SimpleQuantityArray.\n\nExample\n\njulia> ucat = UnitCatalogue() ;\n\njulia> [3.5, 4.6] * ucat.tesla\n2-element SimpleQuantityVector{Float64} of unit T:\n 3.5\n 4.6\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:/-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, AbstractUnit}} where {T<:Number, N}","page":"Quantities","title":"Base.:/","text":"Base.:/(value::AbstractArray{T,N}, abstractUnit::AbstractUnit) where {T<:Number, N}\n\nCombine the array value and abstractUnit to form a physical quantity of type SimpleQuantityArray.\n\nExample\n\njulia> ucat = UnitCatalogue() ;\n\njulia> [3.5, 4.6] / ucat.second\n2-element SimpleQuantityVector{Float64} of unit s^-1:\n 3.5\n 4.6\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Unit-conversion-2","page":"Quantities","title":"Unit conversion","text":"","category":"section"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"inUnitsOf(::AbstractQuantityArray, ::AbstractUnit)\ninBasicSIUnits(::AbstractQuantityArray)\nvalueInUnitsOf(::AbstractQuantityArray, ::AbstractUnit)\nvalueInUnitsOf(::AbstractQuantityArray, ::SimpleQuantity)\nvalueOfDimensionless(::AbstractQuantityArray)\nBase.:*(::AbstractQuantityArray, ::AbstractUnit)\nBase.:/(::AbstractQuantityArray, ::AbstractUnit)","category":"page"},{"location":"reference/quantities/#Alicorn.Quantities.inUnitsOf-Tuple{AbstractQuantityArray, AbstractUnit}","page":"Quantities","title":"Alicorn.Quantities.inUnitsOf","text":"inUnitsOf(qArray::AbstractQuantityArray, unit::AbstractUnit)::SimpleQuantityArray\n\nExpress qArray as an object of type SimpleQuantityArray in terms of the unit specified by unit.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if the dimensions of qArray and unit do not agree\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.inBasicSIUnits-Tuple{AbstractQuantityArray}","page":"Quantities","title":"Alicorn.Quantities.inBasicSIUnits","text":"inBasicSIUnits(qArray::AbstractQuantity)::SimpleQuantityArray\n\nExpress qArray as an object of type SimpleQuantityArray using the seven basic SI units.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.valueInUnitsOf-Tuple{AbstractQuantityArray, AbstractUnit}","page":"Quantities","title":"Alicorn.Quantities.valueInUnitsOf","text":"valueInUnitsOf(qArray::AbstractQuantityArray, unit::AbstractUnit)\n\nReturns the numerical value of qArray expressed in units of unit.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if the dimensions of quantity and unit do not agree\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.valueInUnitsOf-Tuple{AbstractQuantityArray, SimpleQuantity}","page":"Quantities","title":"Alicorn.Quantities.valueInUnitsOf","text":"valueInUnitsOf(quantityArray::AbstractQuantityArray, simpleQuantity::SimpleQuantity)\n\nReturns the numerical value of quantityArray expressed in units of simpleQuantity.\n\nThe result is equivalent to valueOfDimensionless(quantityArray / simpleQuantity).\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if the dimensions of quantityArray and simpleQuantity do not agree\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.valueOfDimensionless-Tuple{AbstractQuantityArray}","page":"Quantities","title":"Alicorn.Quantities.valueOfDimensionless","text":"valueOfDimensionless(qArray::AbstractQuantityArray)\n\nStrips the unit from a dimensionless quantity array and returns its bare value.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if qArray is not dimensionless\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:*-Tuple{AbstractQuantityArray, AbstractUnit}","page":"Quantities","title":"Base.:*","text":"Base.:*(qArray::AbstractQuantityArray, unit::AbstractUnit)\nBase.:*(unit::AbstractUnit, qArray::AbstractQuantityArray)\n\nModify the unit of qArray by multiplying it with unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:/-Tuple{AbstractQuantityArray, AbstractUnit}","page":"Quantities","title":"Base.:/","text":"Base.:/(qArray::AbstractQuantityArray, unit::AbstractUnit)\nBase.:/(unit::AbstractUnit, qArray::AbstractQuantityArray)\n\nModify the unit of qArray by dividing it by unit, or vice versa.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"Base.:(==)(::SimpleQuantityArray, ::SimpleQuantityArray)\nBase.:(==)(::QuantityArray, ::QuantityArray)\nBase.isapprox(::SimpleQuantityArray, ::SimpleQuantityArray)\nBase.:+(::SimpleQuantityArray, ::SimpleQuantityArray)\nBase.:-(::SimpleQuantityArray, ::SimpleQuantityArray)","category":"page"},{"location":"reference/quantities/#Base.:==-Tuple{SimpleQuantityArray, SimpleQuantityArray}","page":"Quantities","title":"Base.:==","text":"Base.:(==)(sqArray1::SimpleQuantityArray, sqArray2::SimpleQuantityArray)\n\nReturns true if sqArray1 and sqArray2 are of equal value and dimension.\n\nIf necessary, sqArray2 is expressed in units of sqArray1.unit before the comparison. Note that the conversion oftens lead to rounding errors that render sqArray1 not equal sqArray2.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if sqArray1 and\n\nsqArray2 are not of the same dimension ```\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:==-Tuple{QuantityArray, QuantityArray}","page":"Quantities","title":"Base.:==","text":"Base.:(==)(qArray1::QuantityArray, qArray2::QuantityArray)\n\nCompare two QuantityArray objects.\n\nThe two quantities are equal if their values, their dimensions, and their internal units are equal. Note that the units are not converted during the comparison.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.isapprox-Tuple{SimpleQuantityArray, SimpleQuantityArray}","page":"Quantities","title":"Base.isapprox","text":"Base.isapprox(sqArray1::SimpleQuantityArray, sqArray2::SimpleQuantityArray; rtol::Real = sqrt(eps()) )\n\nReturns isapprox(sqArray1.value, sqArray2.value, rtol=rtol).\n\nIf necessary, sqArray2 is expressed in units of sqArray1.unit before the comparison. Note that the conversion often leads to rounding errors.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if sqArray1 and\n\nsqArray2 are not of the same dimension\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:+-Tuple{SimpleQuantityArray, SimpleQuantityArray}","page":"Quantities","title":"Base.:+","text":"Base.:+(sqArray1::SimpleQuantityArray, sqArray2::SimpleQuantityArray)\n\nAdd two SimpleQuantityArrays.\n\nThe resulting quantity is expressed in units of sqArray1.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if sqArray1 and sqArray2 are of different dimensions\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Base.:--Tuple{SimpleQuantityArray, SimpleQuantityArray}","page":"Quantities","title":"Base.:-","text":"Base.:-(sqArray1::SimpleQuantityArray, sqArray2::SimpleQuantityArray)\n\nSubtract two SimpleQuantityArrays.\n\nThe resulting quantity is expressed in units of sqArray1.\n\nRaises Exceptions\n\nAlicorn.Exceptions.DimensionMismatchError: if sqArray1 and sqArray2 are of different dimensions\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#InternalUnits","page":"Quantities","title":"InternalUnits","text":"","category":"section"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"InternalUnits\nBase.:(==)(::InternalUnits, ::InternalUnits)\ninternalUnitForDimension(::Dimension, ::InternalUnits)","category":"page"},{"location":"reference/quantities/#Alicorn.Quantities.InternalUnits","page":"Quantities","title":"Alicorn.Quantities.InternalUnits","text":"InternalUnits\n\nA set of seven SimpleQuantity objects which represent a choice of units with respect to which the seven basic physical dimensions of the SI system are measured.\n\nFields\n\nmass::SimpleQuantity: unit of mass\nlength::SimpleQuantity: unit of length\ntime::SimpleQuantity: unit of time\ncurrent::SimpleQuantity: unit of current\ntemperature::SimpleQuantity: unit of temperature\namount::SimpleQuantity: unit of amount\nluminousIntensity::SimpleQuantity: unit of luminousIntensity\n\nConstructors\n\nInternalUnits(::SimpleQuantity, ::SimpleQuantity, ::SimpleQuantity, ::SimpleQuantity, ::SimpleQuantity, ::SimpleQuantity, ::SimpleQuantity)\nInternalUnits(; mass = 1*kilogram, length = 1*meter, time = 1*second, current = 1*ampere,temperature = 1*kelvin, amount = 1*mol, luminousIntensity = 1*candela)\n\n# Raises Exceptions\n- `Core.DomainError`: if attempting to initialize any field with a quantity\nof a value that is zero, infinite, or not real\n- `Exceptions.DimensionMismatchError`: if attempting to initialize any field\nwith a quantity whose dimension does not match the physical dimension the field\nrepresents\n\n# Examples\nThe following `InternalUnits` measure lengths in units of ``3 cm`` and uses\nthe basic SI units for all other dimensions:\n\njldoctest julia> ucat = UnitCatalogue(); cm = ucat.centi * ucat.meter ;\n\njulia> InternalUnits(length = 3cm) InternalUnits  mass unit:               1 kg  length unit:             3 cm  time unit:               1 s  current unit:            1 A  temperature unit:        1 K  amount unit:             1 mol  luminous intensity unit: 1 cd ```\n\n\n\n\n\n","category":"type"},{"location":"reference/quantities/#Base.:==-Tuple{InternalUnits, InternalUnits}","page":"Quantities","title":"Base.:==","text":"Base.:(==)(internalUnits1::InternalUnits, internalUnits2::InternalUnits)\n\nCompare two InternalUnits objects.\n\nTwo InternalUnits objects are equal if the SimpleQuantity objects representing the unit for each of the seven physical dimensions are equal.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/#Alicorn.Quantities.internalUnitForDimension-Tuple{Dimension, InternalUnits}","page":"Quantities","title":"Alicorn.Quantities.internalUnitForDimension","text":"internalUnitForDimension(dimension::Dimension, internalUnits::InternalUnits)\n\nReturns a SimpleQuantity representing the unit in which quantities of physical dimension dimension are measured according to internalUnits.\n\n\n\n\n\n","category":"method"},{"location":"reference/quantities/","page":"Quantities","title":"Quantities","text":"DocTestSetup = nothing","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"DocTestSetup = quote\n    using Alicorn\nend","category":"page"},{"location":"reference/units/#Units","page":"Units","title":"Units","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"This section describes the Units submodule of Alicorn. The module is concerned with defining and storing physical units, and defines the arithmetic operations available for constructing and combining units.","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"Unless stated otherwise, all types, functions, and constants defined in the submodule are exported by Alicorn.","category":"page"},{"location":"reference/units/#Contents","page":"Units","title":"Contents","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Pages = [\"units.md\"]","category":"page"},{"location":"reference/units/#Overview","page":"Units","title":"Overview","text":"","category":"section"},{"location":"reference/units/#How-Units-are-represented","page":"Units","title":"How Units are represented","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"To understand how Alicorn handles physical units, let us consider the unit","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"mathrmkg  mathrmnm^2  mathrmps^-2","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"In Alicorn, this unit is represented by a Unit object. The Unit contains three UnitFactor objects, representing","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"UnitFactor: mathrmkg\nUnitFactor: mathrmnm^2\nUnitFactor: mathrmps^2","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"respectively. A UnitFactor in turn consists of three elements: a UnitPrefix, a BaseUnit, and a real-valued exponent. The first unit factor, for instance, is assembled from","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"UnitPrefix: mathrmk (kilo)\nBaseUnit: mathrmg (gram)\nexponent::Real: 1","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"while for the third","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"UnitPrefix: mathrmp (pico)\nBaseUnit: mathrms (second)\nexponent::Real: -2","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"Each BaseUnit represents a named combination of the seven basic units (kilogram, meter, second, ampere, kelvin, mol, and candela) of the International System of Units, such as the basic units themselves or derived units such as the joule. A BaseUnit is characterized through a prefactor and the corresponding powers of the basic units, represented as a BaseUnitExponents object.","category":"page"},{"location":"reference/units/#Type-Graph-for-Representations-of-Units","page":"Units","title":"Type Graph for Representations of Units","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"There are three types that represent valid physical units: BaseUnit, UnitFactor, and Unit, in order of increasing complexity. These types are concrete realizations of the abstract type AbstractUnit which provides an interface defining a set of methods for physical units.","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"The complete type graph for constituents of physical units is","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"AbstractUnitElement\n├─ UnitPrefix\n├─ BaseUnitExponents\n└─ AbstractUnit\n   ├─ BaseUnit\n   ├─ UnitFactor\n   └─ Unit","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"The types UnitPrefix and BaseUnit making up a UnitFactor are collected in the type union UnitFactorElement.","category":"page"},{"location":"reference/units/#How-Units-can-be-constructed","page":"Units","title":"How Units can be constructed","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Definitions of UnitPrefix and BaseUnit objects are collected in a UnitCatalogue. Alicorn provides a default catalogue constructed by UnitCatalogue() that contains the most important prefixes and named units. A natural way to construct composite units like mathrmkg  mathrmnm^2  mathrmps^-2 is by arithmetically combining unit prefixes and base units:","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"julia> ucat = UnitCatalogue() ;\n\njulia> kg = ucat.kilo * ucat.gram\nUnitFactor kg\n\njulia> nm2 = (ucat.nano * ucat.meter)^2\nUnitFactor nm^2\n\njulia> ps_2 = (ucat.pico * ucat.second)^-2\nUnitFactor ps^-2\n\njulia> kg * nm2 * ps_2\nUnit kg nm^2 ps^-2","category":"page"},{"location":"reference/units/#Abstract-Supertypes","page":"Units","title":"Abstract Supertypes","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"AbstractUnitElement\nUnitFactorElement\nAbstractUnit","category":"page"},{"location":"reference/units/#Alicorn.Units.AbstractUnitElement","page":"Units","title":"Alicorn.Units.AbstractUnitElement","text":"AbstractUnitElement\n\nAbstract supertype for all types used in constructing a physical unit.\n\nAll AbstractUnit types are subtypes of AbstractUnitElement. The only concrete subtype of AbstractUnitElement is UnitPrefix.\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Alicorn.Units.UnitFactorElement","page":"Units","title":"Alicorn.Units.UnitFactorElement","text":"UnitFactorElement = Union{UnitPrefix, BaseUnit}\n\nType union that encompasses the types UnitPrefix and BaseUnit which are used to construct objects of type UnitFactor.\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Alicorn.Units.AbstractUnit","page":"Units","title":"Alicorn.Units.AbstractUnit","text":"AbstractUnit <: AbstractUnitElement\n\nAbstract supertype for all types that represent a physical unit.\n\nThe concrete subtypes of AbstractUnit are BaseUnit, UnitFactor, and Unit.\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Interface-of-AbstractUnit","page":"Units","title":"Interface of AbstractUnit","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Alicorn extends the following functions from the Base module for AbstractUnit types:","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"Base.:*(::AbstractUnit, ::AbstractUnit)\nBase.:/(::AbstractUnit, ::AbstractUnit)","category":"page"},{"location":"reference/units/#Base.:*-Tuple{AbstractUnit, AbstractUnit}","page":"Units","title":"Base.:*","text":"Base.:*(abstractUnit1::AbstractUnit, abstractUnit2::AbstractUnit)\n\nMultiply two objects of type AbstractUnit and return the result as a Unit.\n\nThe method ultimately calls Base.:*(::Unit, ::Unit).\n\nExamples\n\njulia> kilogram = Alicorn.kilogram\nUnitFactor kg\n\njulia> kilogram * kilogram\nUnit kg^2\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:/-Tuple{AbstractUnit, AbstractUnit}","page":"Units","title":"Base.:/","text":"Base.:/(abstractUnit1::AbstractUnit, abstractUnit2::AbstractUnit)\n\nDivide two objects of type AbstractUnits and return the result as a Unit.\n\nThe method ultimately calls Base.:/(::Unit, ::Unit).\n\nExamples\n\njulia> kilogram = Alicorn.kilogram\nUnitFactor kg\n\njulia> kilogram / kilogram\nUnit <unitless>\n\n\n\n\n\n","category":"method"},{"location":"reference/units/","page":"Units","title":"Units","text":"The following functions are considered part of the interface of AbstractUnit and need to be extended for all concrete subtypes of AbstractUnit:","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"convertToUnit(::AbstractUnit)\nBase.:*(::UnitPrefix, ::AbstractUnit)\nBase.inv(::AbstractUnit)\nBase.:^(::AbstractUnit, ::Real)\nBase.:sqrt(::AbstractUnit)\nBase.:cbrt(::AbstractUnit)\nconvertToBasicSI(::AbstractUnit)\nAlicorn.convertToBasicSIAsExponents(::AbstractUnit)","category":"page"},{"location":"reference/units/#Alicorn.Units.convertToUnit-Tuple{AbstractUnit}","page":"Units","title":"Alicorn.Units.convertToUnit","text":"convertToUnit(abstractUnit::AbstractUnit)::Unit\n\nConvert any object of type AbstractUnit to the Unit subtype.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:*-Tuple{UnitPrefix, AbstractUnit}","page":"Units","title":"Base.:*","text":"Base.:*(unitPrefix::UnitPrefix, abstractUnit::AbstractUnit)\n\nCombine a unit prefix with a unit. The behavior of this function depends on the concrete subtype of abstractUnit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.inv-Tuple{AbstractUnit}","page":"Units","title":"Base.inv","text":"Base.inv(abstractUnit::AbstractUnit)\n\nReturn the (multiplicative) inverse of a unit. The behavior of this function depends on the concrete subtype of abstractUnit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:^-Tuple{AbstractUnit, Real}","page":"Units","title":"Base.:^","text":"Base.:^(abstractUnit::AbstractUnit, exponent::Real)\n\nExponentiate a unit. The behavior of this function depends on the concrete subtype of abstractUnit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.sqrt-Tuple{AbstractUnit}","page":"Units","title":"Base.sqrt","text":"Base.:sqrt(abstractUnit::AbstractUnit)\n\nTake the square root of a unit. The behavior of this function depends on the concrete subtype of abstractUnit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.Math.cbrt-Tuple{AbstractUnit}","page":"Units","title":"Base.Math.cbrt","text":"Base.:cbrt(abstractUnit::AbstractUnit)\n\nTake the cubic root of a unit. The behavior of this function depends on the concrete subtype of abstractUnit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.convertToBasicSI-Tuple{AbstractUnit}","page":"Units","title":"Alicorn.Units.convertToBasicSI","text":"convertToBasicSI(abstractUnit::AbstractUnit)\n\nExpress a unit in terms of the seven basic SI units.\n\nOutput\n\n(prefactor::Real, basicUnit::Unit)\n\nThe return variable basicUnit only contains powers of the seven basic SI units (kg, m, s, A, K, mol, cd). The return variable prefactor is the numerical prefactor relating the original unit to the returned unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.convertToBasicSIAsExponents-Tuple{AbstractUnit}","page":"Units","title":"Alicorn.Units.convertToBasicSIAsExponents","text":" convertToBasicSIAsExponents(abstractUnit::AbstractUnit)\n\nExpress a unit in terms of the seven basic SI units.\n\nOutput\n\n(prefactor::Real, basicUnitAsExponents::BaseUnitExponents)\n\nThe return variable basicUnitAsExponents indicates the powers of the seven basic SI units (kg, m, s, A, K, mol, cd) needed to represent the original unit. The return variable prefactor is the numerical prefactor relating the original unit to the returned unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#UnitPrefix","page":"Units","title":"UnitPrefix","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"UnitPrefix","category":"page"},{"location":"reference/units/#Alicorn.Units.UnitPrefix","page":"Units","title":"Alicorn.Units.UnitPrefix","text":"UnitPrefix  <: AbstractUnitElement\n\nMetric prefix that can precede a base unit. The prefix indicates that the unit is scaled by a corresponding factor.\n\nFields\n\nname::String: long form name of the prefix\nsymbol::String: short symbol used to denote the prefix in a composite unit\nvalue: numerical value of the prefix\n\nConstructor\n\nUnitPrefix(;name::String, symbol::String, value::Real)\n\nThe string name needs to be valid as an identifier. The number value needs to be finite.\n\nRaises Exceptions\n\nCore.ArgumentError: if attempting to initialize the name field with a string that is not valid as an identifier\nCore.DomainError: if attempting to initialize the value field with an infinite number\n\nExamples\n\nThe prefix \"milli\" for the International System of Units is by default defined in Alicorn as\n\njulia> UnitPrefix(name=\"milli\", symbol=\"m\", value=1e-3)\nUnitPrefix milli (m) of value 1e-3\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Constants-of-type-UnitPrefix","page":"Units","title":"Constants of type UnitPrefix","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Alicorn.emptyUnitPrefix\nAlicorn.kilo","category":"page"},{"location":"reference/units/#Alicorn.Units.emptyUnitPrefix","page":"Units","title":"Alicorn.Units.emptyUnitPrefix","text":"Constant of type UnitPrefix that indicates the absence of a unit prefix.\n\nThe prefix emptyUnitPrefix is used to construct UnitFactor objects without a unit prefix. The constant is not exported by Alicorn but can be accessed as Alicorn.emptyUnitPrefix\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.kilo","page":"Units","title":"Alicorn.Units.kilo","text":"Constant of type UnitPrefix that represents the SI prefix \"kilo\".\n\nThe prefix kilo is used to define the basic SI unit kilogram. The constant is not exported by Alicorn but can be accessed as Alicorn.kilo\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#BaseUnit","page":"Units","title":"BaseUnit","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"BaseUnit","category":"page"},{"location":"reference/units/#Alicorn.Units.BaseUnit","page":"Units","title":"Alicorn.Units.BaseUnit","text":"BaseUnit <: AbstractUnit\n\nA named unit derived from the seven basic SI units.\n\nFields\n\nname::String: long form name of the unit\nsymbol::String: short symbol used to denote the named unit in a composite unit\nprefactor::Real: numerical prefactor multiplying the polynomial of basic SI units corresponding to the named unit.\nexponents::BaseUnitExponents: collection of the powers in the polynomial of basic SI units corresponding to the named unit.\n\nConstructor\n\nBaseUnit(; name::String, symbol::String, prefactor::Real, exponents::BaseUnitExponents)\n\nRaises Exceptions\n\nCore.ArgumentError: if attempting to initialize the name field with a string that is not valid as an identifier\nCore.DomainError: if attempting to initialize the prefactor field with an infinite number\n\nExamples\n\nThe meter can be represented by\njulia> BaseUnit( name=\"meter\",\n                 symbol=\"m\",\n                 prefactor=1,\n                 exponents=BaseUnitExponents(m=1) )\nBaseUnit meter (1 m = 1 m)\nThe gram can be represented by\njulia> BaseUnit( name=\"gram\",\n                 symbol=\"g\",\n                 prefactor=1e-3,\n                 exponents=BaseUnitExponents(kg=1) )\nBaseUnit gram (1 g = 1e-3 kg)\nThe joule is defined as\n1mathrmJ = 1mathrmkgmathrmm^2mathrms^-2\nand can be represents by\njulia> BaseUnit( name=\"joule\",\n                 symbol=\"J\",\n                 prefactor=1,\n                 exponents=BaseUnitExponents(kg=1, m=2, s=-2) )\nBaseUnit joule (1 J = 1 kg m^2 s^-2)\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Methods-implementing-the-AbstractUnit-interface","page":"Units","title":"Methods implementing the AbstractUnit interface","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Base.:*(::UnitPrefix, ::BaseUnit)\nBase.inv(::BaseUnit)\nBase.:^(::BaseUnit, ::Real)\nBase.sqrt(::BaseUnit)\nBase.cbrt(::BaseUnit)","category":"page"},{"location":"reference/units/#Base.:*-Tuple{UnitPrefix, BaseUnit}","page":"Units","title":"Base.:*","text":"Base.:*(unitPrefix::UnitPrefix, baseUnit::BaseUnit)\n\nCombine unitPrefix and baseUnit to form a unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.inv-Tuple{BaseUnit}","page":"Units","title":"Base.inv","text":"Base.inv(baseUnit::BaseUnit)\n\nReturn the (multiplicative) inverse of baseUnit as a unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:^-Tuple{BaseUnit, Real}","page":"Units","title":"Base.:^","text":"Base.:^(baseUnit::BaseUnit, exponent::Real)\n\nRaise baseUnit to the power of exponent and return the result as a unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.sqrt-Tuple{BaseUnit}","page":"Units","title":"Base.sqrt","text":"Base.sqrt(baseUnit::BaseUnit)\n\nTake the square root of baseUnit and return it as unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.Math.cbrt-Tuple{BaseUnit}","page":"Units","title":"Base.Math.cbrt","text":"Base.cbrt(baseUnit::BaseUnit)\n\nTake the cubic root of baseUnit and return it as unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Constants-of-type-BaseUnit","page":"Units","title":"Constants of type BaseUnit","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Alicorn.unitlessBaseUnit\nAlicorn.gram\nAlicorn.meter\nAlicorn.second\nAlicorn.ampere\nAlicorn.kelvin\nAlicorn.mol\nAlicorn.candela","category":"page"},{"location":"reference/units/#Alicorn.Units.unitlessBaseUnit","page":"Units","title":"Alicorn.Units.unitlessBaseUnit","text":"Constant of type BaseUnit indicating the absence of a unit.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.unitlessBaseUnit.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.gram","page":"Units","title":"Alicorn.Units.gram","text":"Constant of type BaseUnit representing the gram.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.gram.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.meter","page":"Units","title":"Alicorn.Units.meter","text":"Constant of type BaseUnit representing the meter.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.meter.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.second","page":"Units","title":"Alicorn.Units.second","text":"Constant of type BaseUnit representing the second.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.second.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.ampere","page":"Units","title":"Alicorn.Units.ampere","text":"Constant of type BaseUnit representing the ampere.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.ampere.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.kelvin","page":"Units","title":"Alicorn.Units.kelvin","text":"Constant of type BaseUnit representing the kelvin.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.kelvin.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.mol","page":"Units","title":"Alicorn.Units.mol","text":"Constant of type BaseUnit representing the mol.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.mol.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.candela","page":"Units","title":"Alicorn.Units.candela","text":"Constant of type BaseUnit representing the candela.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.candela.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#BaseUnitExponents","page":"Units","title":"BaseUnitExponents","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"BaseUnitExponents\nconvertToUnit(::BaseUnitExponents)\nBase.:*(::Number, ::BaseUnitExponents)\nBase.:+(::BaseUnitExponents, ::BaseUnitExponents)","category":"page"},{"location":"reference/units/#Alicorn.Units.BaseUnitExponents","page":"Units","title":"Alicorn.Units.BaseUnitExponents","text":"BaseUnitExponents\n\nCollection of powers exponentiating each of the seven SI basic units.\n\nThe exponents (a b c d e f g) are interpreted as the powers to which the seven SI basic units are raised:\n\nmathrmkg^a  mathrmm^b  mathrms^c  mathrmA^d  mathrmK^e  mathrmmol^f  mathrmcd^g\n\nThe BaseUnit type uses BaseUnitExponents to define named units in terms of the basic units.\n\nFields\n\nkilogramExponent::Real: power a of kilogram\nmeterExponent::Real: power b of meter\nsecondExponent::Real: power c of second\nampereExponent::Real: power d of ampere\nkelvinExponent::Real: power e of kelvin\nmolExponent::Real: power f of mol\ncandelaExponent::Real: power g of candela\n\nConstructor\n\nBaseUnitExponents(; kg::Real=0, m::Real=0, s::Real=0, A::Real=0, K::Real=0, mol::Real=0, cd::Real=0)\n\nRaises Exceptions\n\nCore.DomainError: if attempting to initialize any field with an infinite number\n\nRemarks\n\nThe constructor converts any exponent to Int if possible.\n\nExamples\n\nThe joule is defined as\n\n 1mathrmJ = 1mathrmkgmathrmm^2mathrms^-2\n\nThe corresponding BaseUnitExponents object is:\n\njulia> BaseUnitExponents(kg=1, m=2, s=-2)\nBaseUnitExponents kg^1 m^2 s^-2 A^0 K^0 mol^0 cd^0\n\nCalling the constructor without any keyword arguments returns exponents that correspond to a dimensionless unit:\n\njulia> BaseUnitExponents()\nBaseUnitExponents kg^0 m^0 s^0 A^0 K^0 mol^0 cd^0\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Alicorn.Units.convertToUnit-Tuple{BaseUnitExponents}","page":"Units","title":"Alicorn.Units.convertToUnit","text":"convertToUnit(baseUnitExponents::BaseUnitExponents)\n\nReturn the Unit corresponding to a BaseUnitExponents object.\n\nExample\n\njulia> jouleExponents = BaseUnitExponents(kg=1, m=2, s=-2)\nBaseUnitExponents kg^1 m^2 s^-2 A^0 K^0 mol^0 cd^0\n\njulia> convertToUnit(jouleExponents)\nUnit kg m^2 s^-2\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:*-Tuple{Number, BaseUnitExponents}","page":"Units","title":"Base.:*","text":"Base.:*(number::Number, baseUnitExponents::BaseUnitExponents)\nBase.:*(baseUnitExponents::BaseUnitExponents, number::Number)\n\nMultiply each exponent in baseUnitExponents by number. This operation corresponds to exponentiating the corresponding unit with number.\n\nExample\n\njulia> meterExps = BaseUnitExponents(m=1)\nBaseUnitExponents kg^0 m^1 s^0 A^0 K^0 mol^0 cd^0\n\njulia> convertToUnit(meterExps)\nUnit m\n\njulia> meterSqrdExps = 2 * meterExps\nBaseUnitExponents kg^0 m^2 s^0 A^0 K^0 mol^0 cd^0\n\njulia> convertToUnit(meterSqrdExps)\nUnit m^2\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:+-Tuple{BaseUnitExponents, BaseUnitExponents}","page":"Units","title":"Base.:+","text":"Base.:+(baseUnitExponents1::BaseUnitExponents, baseUnitExponents2::BaseUnitExponents)\n\nAdd each exponent in baseUnitExponents1 to its counterpart in baseUnitExponents2. This operation corresponds to multiplying the two corresponding units.\n\nExample\n\njulia> newtonExps = BaseUnitExponents(kg=1, m=1, s=-2)\nBaseUnitExponents kg^1 m^1 s^-2 A^0 K^0 mol^0 cd^0\n\njulia> convertToUnit(newtonExps)\nUnit kg m s^-2\n\njulia> meterExps = BaseUnitExponents(m=1)\nBaseUnitExponents kg^0 m^1 s^0 A^0 K^0 mol^0 cd^0\n\njulia> convertToUnit(meterExps)\nUnit m\n\njulia> jouleExps = newtonExps + meterExps\nBaseUnitExponents kg^1 m^2 s^-2 A^0 K^0 mol^0 cd^0\n\njulia> convertToUnit(jouleExps)\nUnit kg m^2 s^-2\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#UnitFactor","page":"Units","title":"UnitFactor","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"UnitFactor","category":"page"},{"location":"reference/units/#Alicorn.Units.UnitFactor","page":"Units","title":"Alicorn.Units.UnitFactor","text":"UnitFactor <: AbstractUnit\n\nA composite unit formed by a named unit of type BaseUnit, a prefix of type UnitPrefix modifying it, and an exponent indicating to which power the pair is raised.\n\nFields\n\nunitPrefix::UnitPrefix\nbaseUnit::BaseUnit\nexponent::Real\n\nConstructors\n\nUnitFactor(unitPrefix::UnitPrefix, baseUnit::BaseUnit, exponent::Real)\nUnitFactor(baseUnit::BaseUnit, exponent::Real)\nUnitFactor(unitPrefix::UnitPrefix, baseUnit::BaseUnit)\nUnitFactor(baseUnit::BaseUnit)\nUnitFactor()\n\nIf any of the three fields are omitted from the constructor call, that field is initialized using the corresponding default value:\n\nunitPrefix = unitPrefix=Alicorn.emptyUnitPrefix\nbaseUnit = Alicorn.unitlessBaseUnit\nexponent = 1\n\nRaises Exceptions\n\nCore.DomainError: if attempting to initialize the exponent field with an infinite number\n\nRemarks\n\nThe constructor converts the exponent to Int if possible. If baseUnit=Alicorn.unitlessBaseUnit, the prefix is always set to unitPrefix=Alicorn.emptyUnitPrefix and the exponent to exponent=1.\n\nExamples\n\nThe unit mathrmkm^2 (square kilometer) can be represented by a UnitFactor that can be constructed using the type constructor method as follows:\njulia> ucat = UnitCatalogue();\n\njulia> UnitFactor(ucat.kilo, ucat.meter, 2)\nUnitFactor km^2\nAlternatively, mathrmkm^2 can be constructed arithmetically:\njulia> ucat = UnitCatalogue();\n\njulia> (ucat.kilo * ucat.meter)^2\nUnitFactor km^2\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Methods-implementing-the-AbstractUnit-interface-2","page":"Units","title":"Methods implementing the AbstractUnit interface","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Base.:*(::UnitPrefix, ::UnitFactor)\nBase.inv(::UnitFactor)\nBase.:^(::UnitFactor, ::Real)\nBase.sqrt(::UnitFactor)\nBase.cbrt(::UnitFactor)","category":"page"},{"location":"reference/units/#Base.:*-Tuple{UnitPrefix, UnitFactor}","page":"Units","title":"Base.:*","text":"Base.:*(unitPrefix::UnitPrefix, unitFactor::UnitFactor)\n\nCombine unitPrefix and unitFactor to form a unit of type UnitFactor.\n\nThe operation is only permitted if\n\nunitFactor does not already contain a unit prefix, and\nthe exponent of unitFactor is 1.\n\nRaises Exceptions\n\nBase.ArgumentError: if unitFactor.unitPrefix != Alicorn.emptyUnitPrefix\nBase.ArgumentError: if unitFactor.exponent != 1\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.inv-Tuple{UnitFactor}","page":"Units","title":"Base.inv","text":"Base.inv(unitFactor::UnitFactor)\n\nReturn the (multiplicative) inverse of unitFactor as a unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:^-Tuple{UnitFactor, Real}","page":"Units","title":"Base.:^","text":"Base.:^(unitFactor::UnitFactor, exponent::Real)\n\nRaise unitFactor to the power of exponent and return the result as a unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.sqrt-Tuple{UnitFactor}","page":"Units","title":"Base.sqrt","text":"Base.sqrt(unitFactor::UnitFactor)\n\nTake the square root of unitFactor and return it as unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.Math.cbrt-Tuple{UnitFactor}","page":"Units","title":"Base.Math.cbrt","text":"Base.cbrt(unitFactor::UnitFactor)\n\nTake the cubic root of unitFactor and return it as unit of type UnitFactor.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Constants-of-type-UnitFactor","page":"Units","title":"Constants of type UnitFactor","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Alicorn.unitlessUnitFactor\nAlicorn.kilogram","category":"page"},{"location":"reference/units/#Alicorn.Units.unitlessUnitFactor","page":"Units","title":"Alicorn.Units.unitlessUnitFactor","text":"Constant of type UnitFactor indicating the absence of a unit.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.unitlessUnitFactor.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Alicorn.Units.kilogram","page":"Units","title":"Alicorn.Units.kilogram","text":"Constant of type UnitFactor representing the kilogram.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.kilogram.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#Unit","page":"Units","title":"Unit","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Unit","category":"page"},{"location":"reference/units/#Alicorn.Units.Unit","page":"Units","title":"Alicorn.Units.Unit","text":"Unit <: AbstractUnit\n\nA composite unit formed by several UnitFactor objects.\n\nFields\n\nunitFactors::Vector{UnitFactor}: ordered list of UnitFactor objects that form the Unit through multiplication (concatenation).\n\nConstructors\n\nUnit(unitFactors::Vector{UnitFactor})\nUnit(abstractUnit::AbstractUnit)\nUnit()\n\nRemarks\n\nThe constructor Unit(abstractUnit::AbstractUnit) is equivalent to convertToUnit(abstractUnit::AbstractUnit). The constructor Unit() returns the constant unitlessUnit.\n\nWhen a Unit is initialized, UnitFactor objects are added to the unitFactors field in order of appearance. UnitFactor objects with the same base (UnitPrefix and BaseUnit) are merged.\n\nExamples\n\nThe unit sqrtmathrmHzmathrmnm (square root of hertz per nanometer) can be constructed using the constructor method as follows:\njulia> ucat = UnitCatalogue();\n\njulia> sqrtHz = UnitFactor(ucat.hertz, 1/2)\nUnitFactor Hz^5e-1\n\njulia> per_nm = UnitFactor(ucat.nano, ucat.meter, -1)\nUnitFactor nm^-1\n\njulia> sqrtHz_per_nm = Unit([sqrtHz, per_nm])\nUnit Hz^5e-1 nm^-1\nAlternatively, sqrtmathrmHzmathrmnm can also be constructed arithmetically:\njulia> ucat = UnitCatalogue();\n\njulia> sqrtHz_per_nm = sqrt(ucat.hertz) / ( ucat.nano * ucat.meter )\nUnit Hz^5e-1 nm^-1\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Methods-implementing-the-AbstractUnit-interface-3","page":"Units","title":"Methods implementing the AbstractUnit interface","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Base.:*(::Unit, ::Unit)\nBase.:/(::Unit, ::Unit)\nBase.:*(::UnitPrefix, ::Unit)\nBase.inv(::Unit)\nBase.:^(unit::Unit, exponent::Real)\nBase.sqrt(::Unit)\nBase.cbrt(::Unit)","category":"page"},{"location":"reference/units/#Base.:*-Tuple{Unit, Unit}","page":"Units","title":"Base.:*","text":"Base.:*(unit1::Unit, unit2::Unit)\n\nMultiply unit1 with unit2 and return the result as a unit of type Unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:/-Tuple{Unit, Unit}","page":"Units","title":"Base.:/","text":"Base.:/(unit1::Unit, unit2::Unit)\n\nDivide unit1 by unit2 and return the result as a unit of type Unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:*-Tuple{UnitPrefix, Unit}","page":"Units","title":"Base.:*","text":"Base.:*(unitPrefix::UnitPrefix, unit::Unit)\n\nCombine unitPrefix and unit to form a unit of type Unit.\n\nThe operation is only permitted if\n\nunit contains a single unit factor unitFactor::UnitFactor,\nunitFactor does not already contain a unit prefix, and\nthe exponent of unitFactor is 1.\n\nRaises Exceptions\n\nBase.ArgumentError: if unit.unitFactors contains more than one element unitFactor::UnitFactor\nBase.ArgumentError: if unitFactor.unitPrefix != Alicorn.emptyUnitPrefix\nBase.ArgumentError: if unitFactor.exponent != 1\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.inv-Tuple{Unit}","page":"Units","title":"Base.inv","text":"Base.inv(unit::Unit)\n\nReturn the (multiplicative) inverse of unit as a unit of type Unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.:^-Tuple{Unit, Real}","page":"Units","title":"Base.:^","text":"Base.:^(unit::Unit, exponent::Real)\n\nRaise unit to the power of exponent and return the result as a unit of type Unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.sqrt-Tuple{Unit}","page":"Units","title":"Base.sqrt","text":"Base.sqrt(unit::Unit)\n\nTake the square root of unit and return it as unit of type Unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.Math.cbrt-Tuple{Unit}","page":"Units","title":"Base.Math.cbrt","text":"Base.cbrt(unit::Unit)\n\nTake the cubic root of unit and return it as unit of type Unit.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Constants-of-type-Unit","page":"Units","title":"Constants of type Unit","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Alicorn.unitlessUnit","category":"page"},{"location":"reference/units/#Alicorn.Units.unitlessUnit","page":"Units","title":"Alicorn.Units.unitlessUnit","text":"Constant of type Unit indicating the absence of a unit.\n\nThe constant is not exported by Alicorn but can be accessed as Alicorn.unitlessUnit.\n\n\n\n\n\n","category":"constant"},{"location":"reference/units/#UnitCatalogue","page":"Units","title":"UnitCatalogue","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"UnitCatalogue","category":"page"},{"location":"reference/units/#Alicorn.Units.UnitCatalogue","page":"Units","title":"Alicorn.Units.UnitCatalogue","text":"UnitCatalogue\n\nCollection of UnitFactorElement objects. These include unit prefixes of type UnitPrefix and named units of type BaseUnit.\n\nA single UnitCatalogue object serves as a consistent library of unit elements. Users can construct composite units based on the prefix and unit definitions stored in the unit catalogue. In most use cases, it is sufficient to initialize a single unit catalogue using UnitCatalogue(). The returned catalogue contains the unit prefixes and named units accepted for use with the International System of Units.\n\nUnit prefixes and base units stored in a unit catalogue can be accessed using dot notation through Base.getproperty using their name field. In consequence, the names of elements stored in the unit catalogue have to be unique.\n\nFields\n\nThe fields of UnitCatalogue are not considered part of the public interface and cannot be accessed using the dot notation. The stored UnitFactorElement objects can be accessed through the following methods:\n\nBase.getproperty(unitCatalogue::UnitCatalogue, symbol::Symbol)\nlistUnitPrefixes(unitCatalogue::UnitCatalogue)\nlistBaseUnits(unitCatalogue::UnitCatalogue)\nlistUnitPrefixNames(unitCatalogue::UnitCatalogue)\nlistBaseUnitNames(unitCatalogue::UnitCatalogue)\nprovidesUnitPrefix(unitCatalogue::UnitCatalogue, symbol::String)\nprovidesBaseUnit(unitCatalogue::UnitCatalogue, symbol::String)\nadd!(unitCatalogue::UnitCatalogue, unitPrefix::UnitPrefix)\nadd!(unitCatalogue::UnitCatalogue, baseUnit::BaseUnit)\nremove!(unitCatalogue::UnitCatalogue, elementName::String)\n\nConstructors\n\nUnitCatalogue(unitPrefixes::Vector{UnitPrefix}, baseUnits::Vector{BaseUnit})\nUnitCatalogue(unitPrefixes::Vector, baseUnits::Vector)\nUnitCatalogue()\n\nRaises exceptions\n\nAlicorn.Exceptions.DuplicationError: if attempting to add UnitFactorElement objects with identical name fields to the UnitCatalogue\n\nRemarks\n\nIf vectors of types other than UnitPrefix and BaseUnit are provided, the constructor attempts to convert them to those types.\n\nIf the constructor is invoked without arguments, the default set of unit prefix and base unit definitions is added to the UnitCatalogue.\n\nExamples\n\nInitialize a default unit catalogue (containing the standard unit prefixes and named units accepted for use with the International System of Units) and use it to define the unit mathrmnm (nanometer):\njulia> ucat = UnitCatalogue()\nUnitCatalogue providing\n 21 unit prefixes\n 43 base units\n\njulia> nm = ucat.nano * ucat.meter\nUnitFactor nm\nInitialize an empty unit catalogue (to be filled with custom prefix and unit definitions) and add new prefix with name nano:\njulia> ucat = UnitCatalogue([], [])\nUnitCatalogue providing\n 0 unit prefixes\n 0 base units\n\njulia> nano = UnitPrefix(name=\"nano\", symbol=\"n\", value=1e-9)\nUnitPrefix nano (n) of value 1e-9\n\njulia> add!(ucat, nano)\nUnitCatalogue providing\n 1 unit prefixes\n 0 base units\n\njulia> ucat.nano\nUnitPrefix nano (n) of value 1e-9\n\n\n\n\n\n","category":"type"},{"location":"reference/units/#Methods","page":"Units","title":"Methods","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Base.getproperty(::UnitCatalogue, ::Symbol)\nBase.propertynames(::UnitCatalogue)\nlistUnitPrefixes(::UnitCatalogue)\nlistBaseUnits(::UnitCatalogue)\nlistUnitPrefixNames(::UnitCatalogue)\nlistBaseUnitNames(::UnitCatalogue)\nprovidesUnitPrefix(::UnitCatalogue, ::String)\nprovidesBaseUnit(::UnitCatalogue, ::String)\nadd!(::UnitCatalogue, ::UnitPrefix)\nremove!(::UnitCatalogue, ::String)","category":"page"},{"location":"reference/units/#Base.getproperty-Tuple{UnitCatalogue, Symbol}","page":"Units","title":"Base.getproperty","text":"Base.getproperty(unitCatalogue::UnitCatalogue, symbol::Symbol)\n\nAccess a UnitFactorElement stored in unitCatalogue through its name using the dot notation.\n\nRaises Exception\n\nBase.KeyError: if attempting to access a non-existent element\n\nExamples\n\njulia> ucat = UnitCatalogue() ;\n\njulia> ucat.peta\nUnitPrefix peta (P) of value 1e+15\n\njulia> ucat.ohm\nBaseUnit ohm (1 Ω = 1 kg m^2 s^-3 A^-2)\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Base.propertynames-Tuple{UnitCatalogue}","page":"Units","title":"Base.propertynames","text":"Base.propertynames(unitCatalogue::UnitCatalogue)\n\nList the names of UnitFactorElement objects stored in unitCatalogue as Symbol objects.\n\nThis method is called to provide tab completion in the REPL.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.listUnitPrefixes-Tuple{UnitCatalogue}","page":"Units","title":"Alicorn.Units.listUnitPrefixes","text":"listUnitPrefixes(unitCatalogue::UnitCatalogue)\n\nReturn a dictionary indexing the UnitPrefix objects stored in unitCatalogue by their name.\n\nExample\n\njulia> ucat = UnitCatalogue() ;\n\njulia> prefixes = listUnitPrefixes(ucat) ;\n\njulia> prefixes[\"micro\"]\nUnitPrefix micro (μ) of value 1e-6\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.listBaseUnits-Tuple{UnitCatalogue}","page":"Units","title":"Alicorn.Units.listBaseUnits","text":"listBaseUnits(unitCatalogue::UnitCatalogue)\n\nReturn a dictionary indexing the BaseUnit objects stored in unitCatalogue by their name.\n\nExample\n\njulia> ucat = UnitCatalogue() ;\n\njulia> baseUnits = listBaseUnits(ucat) ;\n\njulia> baseUnits[\"siemens\"]\nBaseUnit siemens (1 S = 1 kg^-1 m^-2 s^3 A^2)\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.listUnitPrefixNames-Tuple{UnitCatalogue}","page":"Units","title":"Alicorn.Units.listUnitPrefixNames","text":"listUnitPrefixNames(unitCatalogue::UnitCatalogue)\n\nList the names of the UnitPrefix objects stored in unitCatalogue as a Vector{String}.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.listBaseUnitNames-Tuple{UnitCatalogue}","page":"Units","title":"Alicorn.Units.listBaseUnitNames","text":"listBaseUnitNames(unitCatalogue::UnitCatalogue)\n\nList the names of the BaseUnit objects stored in unitCatalogue as a Vector{String}.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.providesUnitPrefix-Tuple{UnitCatalogue, String}","page":"Units","title":"Alicorn.Units.providesUnitPrefix","text":"providesUnitPrefix(unitCatalogue::UnitCatalogue, name::String)\n\nCheck if a UnitPrefix with name name is stored in unitCatalogue.\n\nOutput\n\n::Bool\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.providesBaseUnit-Tuple{UnitCatalogue, String}","page":"Units","title":"Alicorn.Units.providesBaseUnit","text":"providesBaseUnit(unitCatalogue::UnitCatalogue, name::String)\n\nCheck if a BaseUnit with name name is stored in unitCatalogue.\n\nOutput\n\n::Bool\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.add!-Tuple{UnitCatalogue, UnitPrefix}","page":"Units","title":"Alicorn.Units.add!","text":"add!(unitCatalogue::UnitCatalogue, unitPrefix::UnitPrefix)\nadd!(unitCatalogue::UnitCatalogue, baseUnit::BaseUnit)\n\nAdd a UnitFactorElement to unitCatalogue.\n\nNo element with the same name as the element to add may already exist in unitCatalogue.\n\nRaises Exception\n\nAlicorn.Exceptions.DuplicationError: if a UnitFactorElement carrying the same name field as the element to add already exists in unitCatalogue.\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Alicorn.Units.remove!-Tuple{UnitCatalogue, String}","page":"Units","title":"Alicorn.Units.remove!","text":"remove!(unitCatalogue::UnitCatalogue, name::String)\n\nRemove the UnitFactorElement object of name name from unitCatalogue.\n\nRaises Exception\n\nBase.KeyError: if attempting to delete a non-existent element\n\n\n\n\n\n","category":"method"},{"location":"reference/units/#Default-UnitCatalogue","page":"Units","title":"Default UnitCatalogue","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"Calling the UnitCatalogue constructor without arguments returns a catalogue that contains a default set of common units and prefixes used with the SI system:","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"julia> ucat = UnitCatalogue()\nUnitCatalogue providing\n 21 unit prefixes\n 43 base units","category":"page"},{"location":"reference/units/#Default-unit-prefixes","page":"Units","title":"Default unit prefixes","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"The default prefixes are listed in the following table. The corresponding UnitPrefix objects are constructed as","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"julia> yotta = UnitPrefix( name=\"yotta\", symbol=\"Y\", value=1e+24 )\nUnitPrefix yotta (Y) of value 1e+24","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"and can be selected from the default UnitCatalogue by","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"julia> ucat.yotta\nUnitPrefix yotta (Y) of value 1e+24","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"and so on.","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"name symbol value\n\"yotta\" \"Y\" 1e+24\n\"zetta\" \"Z\" 1e+21\n\"exa\" \"E\" 1e+18\n\"peta\" \"P\" 1e+15\n\"tera\" \"T\" 1e+12\n\"giga\" \"G\" 1e+9\n\"mega\" \"M\" 1e+6\n\"kilo\" \"k\" 1e+3\n\"hecto\" \"h\" 1e+2\n\"deca\" \"da\" 1e+1\n\"deci\" \"d\" 1e-1\n\"centi\" \"c\" 1e-2\n\"milli\" \"m\" 1e-3\n\"micro\" \"μ\" 1e-6\n\"nano\" \"n\" 1e-9\n\"pico\" \"p\" 1e-12\n\"femto\" \"f\" 1e-15\n\"atto\" \"a\" 1e-18\n\"zepto\" \"z\" 1e-21\n\"yocto\" \"y\" 1e-24\n\"empty\" \"<empty>\" 1","category":"page"},{"location":"reference/units/#Default-named-units","page":"Units","title":"Default named units","text":"","category":"section"},{"location":"reference/units/","page":"Units","title":"Units","text":"The default named units are listed in the following table. The corresponding BaseUnit objects are constructed as","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"julia> gram = BaseUnit( name=\"gram\", symbol=\"g\", prefactor=1e-3, exponents=BaseUnitExponents(kg=1) )\nBaseUnit gram (1 g = 1e-3 kg)","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"and can be selected from the default UnitCatalogue by","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"julia> ucat.gram\nBaseUnit gram (1 g = 1e-3 kg)","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"and so on.","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"name symbol prefactor exponents corresponding basic unit\n\"gram\" \"g\" 1e-3 BaseUnitExponents(kg=1) 10^-3mathrmkg\n\"meter\" \"m\" 1 BaseUnitExponents(m=1) 1mathrmm\n\"second\" \"s\" 1 BaseUnitExponents(s=1) 1mathrms\n\"ampere\" \"A\" 1 BaseUnitExponents(A=1) 1mathrmA\n\"kelvin\" \"K\" 1 BaseUnitExponents(K=1) 1mathrmK\n\"mol\" \"mol\" 1 BaseUnitExponents(mol=1) 1mathrmmol\n\"candela\" \"cd\" 1 BaseUnitExponents(cd=1) 1mathrmcd\n\"hertz\" \"Hz\" 1 BaseUnitExponents(s=-1) 1mathrms^-1\n\"radian\" \"rad\" 1 BaseUnitExponents() 1\n\"steradian\" \"sr\" 1 BaseUnitExponents() 1\n\"newton\" \"N\" 1 BaseUnitExponents(kg=1, m=1, s=-2) 1mathrmkgmathrmmmathrms^-2\n\"pascal\" \"Pa\" 1 BaseUnitExponents(kg=1, m=-1, s=-2) 1mathrmkgmathrmm^-1mathrms^-2\n\"joule\" \"J\" 1 BaseUnitExponents(kg=1, m=2, s=-2) 1mathrmkgmathrmm^2mathrms^-2\n\"watt\" \"W\" 1 BaseUnitExponents(kg=1, m=2, s=-3) 1mathrmkgmathrmm^2mathrms^-3\n\"coulomb\" \"C\" 1 BaseUnitExponents(s=1, A=1) 1mathrmsmathrmA\n\"volt\" \"V\" 1 BaseUnitExponents(kg=1, m=2, s=-3, A=-1) 1mathrmkgmathrmm^2mathrms^-3mathrmA^-1\n\"farad\" \"F\" 1 BaseUnitExponents(kg=-1, m=-2, s=4, A=2) 1mathrmkg^-1mathrmm^-2mathrms^4mathrmA^2\n\"ohm\" \"Ω\" 1 BaseUnitExponents(kg=1, m=2, s=-3, A=-2) 1mathrmkgmathrmm^2mathrms^-3mathrmA^-2\n\"siemens\" \"S\" 1 BaseUnitExponents(kg=-1, m=-2, s=3, A=2) 1mathrmkg^-1mathrmm^-2mathrms^3mathrmA^2\n\"weber\" \"W\" 1 BaseUnitExponents(kg=1, m=2, s=-2, A=-1) 1mathrmkgmathrmm^2mathrms^-2mathrmA^-1\n\"tesla\" \"T\" 1 BaseUnitExponents(kg=1, s=-2, A=-1) 1mathrmkgmathrms^-2mathrmA^-1\n\"henry\" \"H\" 1 BaseUnitExponents(kg=1, m=2, s=-2, A=-2) 1mathrmkgmathrmm^2mathrms^-2mathrmA^-2\n\"degreeCelsius\" \"°C\" 1 BaseUnitExponents(K=1) 1mathrmK\n\"lumen\" \"lm\" 1 BaseUnitExponents(cd=1) 1mathrmcd\n\"lux\" \"lx\" 1 BaseUnitExponents(m=-2, cd=1) 1mathrmm^-2mathrmcd\n\"becquerel\" \"Bq\" 1 BaseUnitExponents(s=-1) 1mathrms^-1\n\"gray\" \"Gy\" 1 BaseUnitExponents(m=2, s=-2) 1mathrmm^2mathrms^-2\n\"sievert\" \"Sv\" 1 BaseUnitExponents(m=2, s=-2) 1mathrmm^2mathrms^-2\n\"katal\" \"kat\" 1 BaseUnitExponents(s=-1, mol=1) 1mathrms^-1mathrmmol\n\"minute\" \"min\" 60 BaseUnitExponents(s=1) 60mathrms\n\"hour\" \"h\" 3600 BaseUnitExponents(s=1) 3600mathrms\n\"day\" \"d\" 86400 BaseUnitExponents(s=1) 86400mathrms\n\"astronomicalUnit\" \"au\" 149597870700 BaseUnitExponents(m=1) 149597870700mathrmm\n\"degree\" \"°\" pi/180 BaseUnitExponents() pi180\n\"arcminute\" \"'\" pi/10800 BaseUnitExponents() pi10800\n\"arcsecond\" \"\\\"\" pi/648000 BaseUnitExponents() pi648000\n\"hectare\" \"ha\" 1e4 BaseUnitExponents(m=2) 10^4mathrmm^2\n\"liter\" \"l\" 1e-3 BaseUnitExponents(m=3) 10^-3mathrmm^3\n\"tonne\" \"t\" 1e3 BaseUnitExponents(kg=1) 10^3mathrmkg\n\"dalton\" \"Da\" 1.66053906660e-27 BaseUnitExponents(kg=1) 166053906660 times 10^-27mathrmkg\n\"electronvolt\" \"eV\" 1.602176634e-19 BaseUnitExponents(kg=1, m=2, s=-2) 1602176634 times 10^-19mathrmkgmathrmm^2mathrms^-2\n\"angstrom\" \"Å\" 1e-10 BaseUnitExponents(m=1) 10^-10mathrmm\n\"unitless\" \"<unitless>\" 1 BaseUnitExponents() 1","category":"page"},{"location":"reference/units/","page":"Units","title":"Units","text":"DocTestSetup = nothing","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"DocTestSetup = quote\n    using Alicorn\n    ucat = UnitCatalogue()\n    mass = 2 * (ucat.kilo * ucat.gram)\n    acceleration = 10 * ucat.meter * ucat.second^-2\n    force = mass * acceleration\n    height = 230 * ( ucat.centi * ucat.meter )\n    energy = force * height\n    energy_kJ = inUnitsOf(energy, ucat.kilo * ucat.joule)\n    noseHeight = 1.7 * ucat.meter\n    dropDistance = height - noseHeight\n    energyToNose = force * dropDistance\nend","category":"page"},{"location":"manual/basic_usage/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"As an examples, let us consider a rock of mass m = 2mathrmkg. We know that on earth, a force of F = m g is required to lift the rock, where approximately g = 10mathrmms^2. We would like to use Julia with the Alicorn module to calculate the energy E = Fh we have to invest to raise the rock above our heads to a height of h = 230mathrmcm. Alicorn comes with a wide range of predefined units and unit prefixes compatible with the International System of Units. To access them, we load Alicorn and start by initializing a default UnitCatalogue:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"julia> using Alicorn\n\njulia> ucat = UnitCatalogue()\nUnitCatalogue providing\n 21 unit prefixes\n 43 base units","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"We can then define the quantities given in the problem","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"julia> mass = 2 * (ucat.kilo * ucat.gram)\n2 kg\n\njulia> acceleration = 10 * ucat.meter * ucat.second^-2\n10 m s^-2","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"and have Julia calculate the required force:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"julia> force = mass * acceleration\n20 kg m s^-2","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Note that Alicorn made no assumption about the unit we would like to express the energy in. Instead, it simply combined the units by multiplying them. We decide we would like to express the force in units of kilonewton","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"julia> inUnitsOf(force, ucat.kilo * ucat.newton)\n0.02 kN","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"and the resulting energy in units of joule:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"julia> energy = force * height\n4600 kg m s^-2 cm\n\njulia> inUnitsOf(energy, ucat.joule)\n46.0 J","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Now, while we are holding the rock up there, we wonder what would happen if we were to accidentally drop it on our nose. Assuming that our nose is h_n = 17mathrmm above the ground, we can calculate the energy transferred after a drop of height h - h_n as follows:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"julia> noseHeight = 1.7 * ucat.meter\n1.7 m\n\njulia> dropDistance = height - noseHeight\n60.0 cm\n\njulia> energyToNose = force * dropDistance\n1200.0 kg m s^-2 cm\n\njulia> inUnitsOf(energyToNose, ucat.joule)\n12.0 J","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Note that Alicorn used the unit of height to express the quantity dropDistance resulting from taking the difference.","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Finally, let us check how the transferred energy compares to the rest energy of an electron-positron pair. We recall that the rest energy of an electron-positron pair is around E_p = 1022mathrmMeV and express our results in the according unit:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"julia> inUnitsOf(energyToNose, ucat.mega * ucat.electronvolt)\n7.489810889352916e13 MeV","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"DocTestSetup = nothing","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"DocTestSetup = quote\n    using Alicorn\nend","category":"page"},{"location":"manual/advanced_usage/#Advanced-Usage","page":"Advanced Usage","title":"Advanced Usage","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"This section demonstrates how to accomplish some typical tasks.","category":"page"},{"location":"manual/advanced_usage/#Contents","page":"Advanced Usage","title":"Contents","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Pages = [\"advanced_usage.md\"]","category":"page"},{"location":"manual/advanced_usage/#Empty-UnitCatalogue","page":"Advanced Usage","title":"Empty UnitCatalogue","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"An empty UnitCatalogue can be initialized by explicitly passing empty lists of prefixes and units to the constructor:","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"julia> emptyUcat = UnitCatalogue([],[])\nUnitCatalogue providing\n 0 unit prefixes\n 0 base units","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Users can then fill the catalogue with custom definitions.","category":"page"},{"location":"manual/advanced_usage/#Custom-prefixes","page":"Advanced Usage","title":"Custom prefixes","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"As an example, we define the dozen as a unit prefix. The dozen is not contained in a default UnitCatalogue:","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"julia> ucat = UnitCatalogue()\nUnitCatalogue providing\n 21 unit prefixes\n 43 base units\n\njulia> providesUnitPrefix(ucat, \"dozen\")\nfalse","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"We define it and add it to the unit catalogue:","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"julia> dozen = UnitPrefix( name=\"dozen\", symbol=\"dz\", value=12 )\nUnitPrefix dozen (dz) of value 1.2e+1\n\njulia> add!(ucat, dozen)\nUnitCatalogue providing\n 22 unit prefixes\n 43 base units\n\njulia> providesUnitPrefix(ucat, \"dozen\")\ntrue","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"info: Custom unit prefix\nIt is not required to add a new custom prefix to an existing UnitCatalogue. However, doing so is good practice since a UnitCatalogue can easily be passed to methods (brought into specific scopes) as a whole.","category":"page"},{"location":"manual/advanced_usage/#Custom-units","page":"Advanced Usage","title":"Custom units","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"As an example, we define the international mile. The mile is not contained in the default UnitCatalogue:","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"julia> ucat = UnitCatalogue()\nUnitCatalogue providing\n 21 unit prefixes\n 43 base units\n\njulia> providesUnitPrefix(ucat, \"mile\")\nfalse","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"We define it and add it to the unit catalogue:","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"julia> mile = BaseUnit( name=\"mile\", symbol=\"mi\", prefactor=1609.344, exponents=BaseUnitExponents(m=1) )\nBaseUnit mile (1 mi = 1.61e+3 m)\n\njulia> add!(ucat, mile)\nUnitCatalogue providing\n 21 unit prefixes\n 44 base units\n\njulia> providesBaseUnit(ucat, \"mile\")\ntrue","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"info: Custom base unit\nIt is not required to add a new custom base unit to an existing UnitCatalogue. However, doing so is good practice since a UnitCatalogue can easily be passed to methods (brought into specific scopes) as a whole.","category":"page"},{"location":"manual/advanced_usage/#Removing-a-prefix-or-unit","page":"Advanced Usage","title":"Removing a prefix or unit","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Unit prefixes and named units can be removed one by one from an existing UnitCatalogue:","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"julia> ucat = UnitCatalogue()\nUnitCatalogue providing\n 21 unit prefixes\n 43 base units\n\njulia> providesUnitPrefix(ucat, \"milli\")\ntrue\n\njulia> remove!(ucat, \"milli\")\nUnitCatalogue providing\n 20 unit prefixes\n 43 base units\n\njulia> providesUnitPrefix(ucat, \"milli\")\nfalse","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"and likewise for a unit","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"julia> ucat = UnitCatalogue()\nUnitCatalogue providing\n 21 unit prefixes\n 43 base units\n\njulia> providesBaseUnit(ucat, \"angstrom\")\ntrue\n\njulia> remove!(ucat, \"angstrom\")\nUnitCatalogue providing\n 21 unit prefixes\n 42 base units\n\njulia> providesBaseUnit(ucat, \"angstrom\")\nfalse","category":"page"},{"location":"manual/advanced_usage/#Redefining-a-prefix-or-unit","page":"Advanced Usage","title":"Redefining a prefix or unit","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"The names of prefixes and base units stored in a UnitCatalogue have to be unique. In consequence, to redefine a prefix or unit, it first has to be removed from the catalogue and, subsequently, the newly defined element added.","category":"page"},{"location":"manual/advanced_usage/#Custom-methods-for-quantities","page":"Advanced Usage","title":"Custom methods for quantities","text":"","category":"section"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Alicorn extends a range of methods (mathematical functions, such as multiplication) to operate on physical quantities. The available methods are part of the interface defined by AbstractQuantity, concrete implementations are provided for the SimpleQuantity type.","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Users can easily extend additional methods to work with the SimpleQuantity type. As an example, the following listing shows how Alicorn defines the multiplication of two SimpleQuantity objects by extending the Base.:* method:","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"function Base.:*(simpleQuantity1::SimpleQuantity, simpleQuantity2::SimpleQuantity)\n    productValue = simpleQuantity1.value * simpleQuantity2.value\n    productUnit = simpleQuantity1.unit * simpleQuantity2.unit\n    productQuantity = SimpleQuantity(productValue, productUnit)\n    return productQuantity\nend","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Here, productValue is the product of the values of the two quantities, and productUnit is the resulting unit of the product.","category":"page"},{"location":"manual/advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"DocTestSetup = nothing","category":"page"},{"location":"manual/caveats/","page":"Caveats","title":"Caveats","text":"DocTestSetup = quote\n    using Alicorn\nend","category":"page"},{"location":"manual/caveats/#Caveats","page":"Caveats","title":"Caveats","text":"","category":"section"},{"location":"manual/caveats/#Contents","page":"Caveats","title":"Contents","text":"","category":"section"},{"location":"manual/caveats/","page":"Caveats","title":"Caveats","text":"Pages = [\"caveats.md\"]","category":"page"},{"location":"manual/caveats/#Temperatures-are-relative","page":"Caveats","title":"Temperatures are relative","text":"","category":"section"},{"location":"manual/caveats/","page":"Caveats","title":"Caveats","text":"Alicorn treats temperatures (as well as all other quantities) as relative rather than absolute. In consequence, when converting from kelvin to degrees celsius, no offset is added:","category":"page"},{"location":"manual/caveats/","page":"Caveats","title":"Caveats","text":"julia> ucat = UnitCatalogue() ;\n\njulia> T = 20 * ucat.degreeCelsius\n20 °C\n\njulia> inUnitsOf(T, ucat.kelvin)\n20.0 K","category":"page"},{"location":"manual/caveats/#Only-dimensions-are-compared","page":"Caveats","title":"Only dimensions are compared","text":"","category":"section"},{"location":"manual/caveats/","page":"Caveats","title":"Caveats","text":"Alicorn is only aware of physical dimensions, not of the physical quantities as such. The responsibility to choose units suitable for a given physical quantity rests with the user. For example, it is possible to add two quantities that have the same dimension but represent different physical concepts, such as angles and solid angles:","category":"page"},{"location":"manual/caveats/","page":"Caveats","title":"Caveats","text":"julia> ucat = UnitCatalogue() ;\n\njulia> solidAngle = 1 * ucat.steradian\n1 sr\n\njulia> angle = 1 * ucat.degree\n1 °\n\njulia> nonsense = angle + solidAngle\n58.29577951308232 °","category":"page"},{"location":"manual/caveats/","page":"Caveats","title":"Caveats","text":"DocTestSetup = nothing","category":"page"},{"location":"#The-Alicorn.jl-package","page":"Home","title":"The Alicorn.jl package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Dynamically define and manipulate physical units and quantities in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Alicorn package serves a dual purpose:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Dynamically define and combine physical units based on the International System of Units (SI). This functionality is provided by the Units submodule.\nHandle physical quantities and correctly treat their units. This functionality is provided by the Quantities submodule.","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is divided into two parts: The Manual describes how to use Alicorn to define units and handle physical quantities. The Reference documents all types, methods, and constants that form the public API of Alicorn.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Alicorn represents units as objects of type AbstractUnit with suitable methods to create and manipulate them\nAlicorn represents quantities as objects of type AbstractQuantity with suitable methods to create and manipulate them\nUnits can be combined and quantities formed using intuitive arithmetic syntax, no parsing of strings representing units is required\nNew units can be dynamically defined during runtime, no manipulation of source files or configuration files is required","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Alicorn.jl package is registered in the General Julia registry and can be installed using Julia's package manager Pkg.jl: In the Julia REPL, add Alicorn to your default Julia environment by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n\npkg> add Alicorn","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The listing below shows a minimal example of how to use Alicorn. Refer to the Basic Usage section for more details.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Alicorn\n\njulia> ucat = UnitCatalogue() ;\n\njulia> mass = 2 * (ucat.kilo * ucat.gram)\n2 kg\n\njulia> acceleration = 10 * ucat.meter * ucat.second^-2\n10 m s^-2\n\njulia> force = mass * acceleration\n20 kg m s^-2\n\njulia> inUnitsOf(force, ucat.kilo * ucat.newton)\n0.02 kN","category":"page"},{"location":"#Alternative","page":"Home","title":"Alternative","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are interested in Alicorn, also have a look at the mature Unitful.jl package. Unitful.jl offers functionalities similar to Alicorn.jl, and more.","category":"page"},{"location":"reference/dimensions/","page":"Dimensions","title":"Dimensions","text":"DocTestSetup = quote\n    using Alicorn\nend","category":"page"},{"location":"reference/dimensions/#Dimensions","page":"Dimensions","title":"Dimensions","text":"","category":"section"},{"location":"reference/dimensions/","page":"Dimensions","title":"Dimensions","text":"Dimension\nBase.:*(::Number, ::Dimension)\nBase.:+(::Dimension, ::Dimension)\ndimensionOf(::AbstractUnit)\ndimensionOf(::AbstractQuantity)\ndimensionOf(::AbstractQuantityArray)","category":"page"},{"location":"reference/dimensions/#Alicorn.Dimensions.Dimension","page":"Dimensions","title":"Alicorn.Dimensions.Dimension","text":"Dimension\n\nThe dimension of a physical quantity.\n\nThe dimension is expressed as a collection (a b c d e f g) of powers exponentiating each of the seven basic dimensions of the SI system,\n\nmathrmM^a  mathrmL^b  mathrmT^c  mathrmI^d  mathrmTheta^e  mathrmN^f  mathrmJ^g\n\nwhere\n\nmathrmM: mass dimension\nmathrmL: length dimension\nmathrmT: time dimension\nmathrmI: electrical current dimension\nmathrmTheta: temperature dimension\nmathrmN: amount of substance dimension\nmathrmJ: luminous intensity dimension\n\nFields\n\nmassExponent::Real: exponent a of the mass dimension\nlengthExponent::Real: exponent b of the length dimension\ntimeExponent::Real: exponent c of the time dimension\ncurrentExponent::Real: exponent d of the electrical current dimension\ntemperatureExponent::Real: exponent e of the temperature dimension\namountExponent::Real: exponent f of the amount of substance dimension\nluminousIntensityExponent::Real: exponent g of the luminous intensity dimension\n\nConstructor\n\nDimension(; M::Real=0, L::Real=0, T::Real=0, I::Real=0, θ::Real=0, N::Real=0, J::Real=0)\n\nRaises Exceptions\n\nCore.DomainError: if attempting to initialize any field with an infinite number\n\nRemarks\n\nThe constructor converts any exponent to Int if possible.\n\nExamples\n\nQuantities describing an energy are of dimension\n\n mathrmM  mathrmL^2  mathrmT^-2\n\nThe corresponding Dimension object is:\n\njulia> Dimension(M=1, L=2, T=-2)\nDimension M^1 L^2 T^-2 I^0 θ^0 N^0 J^0\n\nCalling the constructor without any keyword arguments returns exponents that correspond to a dimensionless quantity:\n\njulia> Dimension()\nDimension M^0 L^0 T^0 I^0 θ^0 N^0 J^0\n\n\n\n\n\n","category":"type"},{"location":"reference/dimensions/#Base.:*-Tuple{Number, Dimension}","page":"Dimensions","title":"Base.:*","text":"Base.:*(number::Number, dimension::Dimension)\nBase.:*(dimension::Dimension, number::Number)\n\nMultiply each exponent in dimension by number.\n\nIf a quantity Q is of dimension D, then Q^p is of dimension p * D.\n\nExample\n\nLet us consider a quantity Q of dimension 'length':\n\njulia> ucat = UnitCatalogue() ;\n\njulia> Q = 2 * ucat.meter\n2 m\n\njulia> D = dimensionOf(Q)\nDimension M^0 L^1 T^0 I^0 θ^0 N^0 J^0\n\nIf we raise Q to the power of 3, it has dimension L^3 which can be represented by 3 * D:\n\njulia> D2 = dimensionOf(Q^3)\nDimension M^0 L^3 T^0 I^0 θ^0 N^0 J^0\n\njulia> D2 == 3 * D\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/dimensions/#Base.:+-Tuple{Dimension, Dimension}","page":"Dimensions","title":"Base.:+","text":"Base.:+(dimension1::Dimension, dimension2::Dimension)\n\nAdd each exponent in dimension1 to its counterpart in dimension2.\n\nIf a quantity Q1 (Q2)s of dimension D1 (D2), then Q1 * Q2 is of dimension D1 + D2.\n\nExample\n\njulia> ucat = UnitCatalogue() ;\n\njulia> Q1 = 2 * ucat.meter\n2 m\n\njulia> D1 = dimensionOf(Q1)\nDimension M^0 L^1 T^0 I^0 θ^0 N^0 J^0\n\njulia> Q2 = 3 / ucat.second\n3 s^-1\n\njulia> D2 = dimensionOf(Q2)\nDimension M^0 L^0 T^-1 I^0 θ^0 N^0 J^0\n\njulia> D = dimensionOf( Q1 * Q2 )\nDimension M^0 L^1 T^-1 I^0 θ^0 N^0 J^0\n\njulia> D == D1 + D2\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/dimensions/#Alicorn.Quantities.dimensionOf-Tuple{AbstractUnit}","page":"Dimensions","title":"Alicorn.Quantities.dimensionOf","text":"dimensionOf(abstractUnit::AbstractUnit)\n\nReturns the dimension of a physical unit of type AbstractUnit.\n\nExample\n\nOne siemens is defined as 1mathrmS = 1mathrmkg^-1mathrmm^-2mathrms^3mathrmA^2. The unit is hence of dimension mathrmM^-1mathrmL^-2mathrmT^3mathrmI^2:\n\njulia> ucat = UnitCatalogue() ;\n\njulia> siemens = ucat.siemens\nBaseUnit siemens (1 S = 1 kg^-1 m^-2 s^3 A^2)\njulia> dimensionOf(siemens)\nDimension M^-1 L^-2 T^3 I^2 θ^0 N^0 J^0\n\n\n\n\n\n","category":"method"},{"location":"reference/dimensions/#Alicorn.Quantities.dimensionOf-Tuple{AbstractQuantity}","page":"Dimensions","title":"Alicorn.Quantities.dimensionOf","text":"dimensionOf(quantity::AbstractQuantity)\n\nReturns the dimension of a physical quantity of type AbstractQuantity.\n\nExample\n\nOne henry is defined as 1mathrmH = 1mathrmkg^1mathrmm^2mathrms^-2mathrmA^-2 and is hence of dimension mathrmM^1mathrmL^2mathrmT^-2mathrmI^-2:\n\njulia> ucat = UnitCatalogue() ;\n\njulia> oneHenry = 1 * ucat.henry\n1 H\njulia> dimensionOf(oneHenry)\nDimension M^1 L^2 T^-2 I^-2 θ^0 N^0 J^0\n\n\n\n\n\n","category":"method"},{"location":"reference/dimensions/#Alicorn.Quantities.dimensionOf-Tuple{AbstractQuantityArray}","page":"Dimensions","title":"Alicorn.Quantities.dimensionOf","text":"dimensionOf(quantityArray::AbstractQuantityArray)\n\nReturns the dimension of a physical quantity of type AbstractQuantityArray, analogous to dimensionOf(::AbstractQuantity) ```\n\n\n\n\n\n","category":"method"},{"location":"reference/dimensions/","page":"Dimensions","title":"Dimensions","text":"DocTestSetup = nothing","category":"page"}]
}
